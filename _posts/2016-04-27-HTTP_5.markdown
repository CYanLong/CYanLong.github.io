---
---

内容编码:
-------
HTTP允许对报文主体的数据进行编码，比如可以使之更安全或进行压缩以节省空间。当客户端请求一个资源，例如一个很大的HTML文本，服务器通常会将它进行压缩，这样有助于减少传输实体的时间。服务器还可以把内容搅乱或加密，以防止未经授权的第三方看到文档的内容。

这种类型的编码是在发送方应用到内容之上的。当内容经过内容编码之后，编好码的数据就放在实体主体中，像往常一样发送给接收方。

内容编码的过程.
------------

内容编码的过程大致如下:

1.网站服务器生成原始响应报文，其中有原始的 Content-Type 和 Content-Length首部。

2.内容编码服务器 (也可能就是原始服务器或者下行的代理) 创建编码后的报文。
编码后的报文有同样的Content-Type但Content-Length可能不同。内容编码服务器在编码后的报文中增加Content-Encoding首部，告知客户端浏览器需进行解码。

3.客户端浏览器得到编码后的报文，进行解码，获得原始报文。

	
	#原始内容.
	Content-Type: text/html
	Content-Length: 12480
	
	#编码之后的内容.
	Content-type: text/html
	Content-length: 3907
	Conent-encoding: gzip


上面的例子显示了当进行了gzip编码之后报文实体的数据将变小。

内容编码类型.
------------

Http定义了一些标准的内容编码类型。如 gzip，deflate等，通常gzip效率最高，使用最广泛。

Accept-Encoding首部.
-------------------
毫无疑问，我们不希望服务器用客户端无法解码的方式来对内容进行编码。为了避免服务器使用客户端不支持的编码方式，客户端就把自己支持的内容编码方式列表放在请求的Accept-Encoding首部中发给服务器。这样，服务器就可以知道客户端能否进行解码来决定要不要进行编码。

Chrome浏览器默认会对每一个请求都加一条这样的首部:

	Accept-Encoding:gzip, deflate, sdch

Tomcat 配置.
------------



传输编码
---------
上面的内容编码，是对报文的主体进行的可逆变化。内容编码是和内容的具体格式细节紧密相关的。例如，用gzip可以很好的压缩文本文件，但不适合对图片等进行压缩处理。所以，我们用传输编码。

传输编码也是作用在实体主体上的可逆变换，但使用传输编码是为了改变报文中的数据在网络上的传输的方式。